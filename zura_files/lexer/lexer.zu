@import "../std/asciiToString.zu";

const TokenKind := enum {
  Plus,
  Dash,
  Star,
  Slash,
  LParen,
  RParen,
  Number,
  Identifier,
  String,
  Comma,
  Semicolon,
  Equals,
  LBrace,
  RBrace,
  LBracket,
  RBracket,
  Less,
  Greater,
  Ampersand,
  Percent,
  Bang,
  Question,
  Colon,
  Dot
};

const Position := struct {
  line: int!,
  pos: int!
};

const Token := struct {
  position: Position,
  kind: TokenKind,
  value: *char
};

const Lexer := struct {
  current: *char,
  start: *char,
  line: int!,
  pos: int!,
};

const advance := fn (lx: *Lexer) char {
  return lx&.current[lx&.pos++];
};

const whitespace := fn (lx: *Lexer) int! {
  have count: int! = 0;

  loop (i = 0; i < lx&.pos) : (i++) {
    if (lx&.current[lx&.pos] == @cast<char>(10)) { # Newline 
      lx&.line++;
      lx&.pos = 0;
      advance(lx);
    } 
    if (lx&.current[lx&.pos] == @cast<char>(32)) { # Space
      count++;
      advance(lx);
    } else {
      break; # Stop if we encounter a non-whitespace character
    }
  }

  return count; # Return the count of whitespace characters skipped
};

const scan := fn (lx: *Lexer, size: int!) void {
  have count: int! = 0;
  have whitespaceCount: int! = 0;

  loop (i = 0; i < size) : (i++) {
    whitespaceCount = whitespace(lx);
    lx&.start = lx&.current;

    # This check is not required as the loop is a fixed size anyways
    # if (lx&.current[lx&.pos] == @cast<char>(0)) {
    #   break; # End of input
    # }
    
    # for now just print the current character and its position
    @outputln(1, "Current character: ", ascii_to_string(lx&.current[lx&.pos]), " ", lx&.current[lx&.pos], " at position: ", lx&.pos, " on line: ", lx&.line, " whitespace skipped: ", whitespaceCount);
    # TODO: implement tokenization for single-character tokens
    # TODO: implement tokenization for multi-character tokens (@ functions, identifiers, numbers, and strings)
    advance(lx);
  }
};

@import "../std/asciiToString.zu";
@import "helper.zu";

const tokenize := fn (source: *char, realSize: int!, tk: *[]Token) void {
  have line: int! = 1;
  have col: int! = 0;
  have value: *char = "";

  loop (i = 0; i < realSize) : (i++) {
    # Check whitespace and skip it
    if (source[i] == @cast<char>(32)) { col++; } # Skip spaces
    if (source[i] == @cast<char>(10)) { line++; col = 0; } # Skip newlines

    if (is_eof(source, i)) break; # Stop at null terminator

    loop (j = i; alpha(source, &j)) : (j++) {
      tk&[j] = make_token(ascii_to_string(source[j]), @cast<int!>(TokenKind.Identifier), line, col);
      advance(&i, &col); # Advance past the letter
    }

    loop (j = i; digit(source, &j)) : (j++) {
      tk&[j] = make_token(ascii_to_string(source[j]), @cast<int!>(TokenKind.Int), line, col);
      advance(&i, &col); # Advance past the digit
    }

    tk&[i] = make_token(ascii_to_string(source[i]), 0, line, col);
  }

  # Add a null terminator to the end of the tokens array
  tk&[realSize] = make_token("", @cast<int!>(TokenKind.EOF), line, col + 1);
};

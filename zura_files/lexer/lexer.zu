@import "../std/asciiToString.zu";
@import "helper.zu";

# const make_token := fn (k: TokenKind, v: *char) Token {
#   have token: Token = {
#     kind: k,
#     value: v,
#   };
#   return token;
# };

const scan := fn (source: *char, size: int!) void {
  have whitespaceCount: int! = 0;
  have generate: bool! = true; # Flag to control token generation
  have col: int! = 0;
  have line: int! = 1;

  loop (i = 0; i < size) : (i++) {
    whitespaceCount = 0; # reset whitespace count for each character

    have whitespace: int! = check_whitespace(source, &i, &line, &col, size);
    if (whitespace == 1) {
      if (source[i] == @cast<char>(10)) col = 0;
      whitespaceCount++;
    } else {
      col++; # increment column count
    }

    have is_alpha: bool = ident(source, &i);
    if (is_alpha) {
      @outputln(1, "identifier found at ", ascii_to_string(source[i]));
    }
    # Anything that is prexed with '@' is a special token
    # have is_default: int! = default_function(source, &i);

    have is_digit: *char = number(source, &i);
    if (@streq(@cast<str>(is_digit), "")) {} else {
      @outputln(1, is_digit);
    }

    # TODO: Implement check for single-character tokens and multi-character tokens
  }
};

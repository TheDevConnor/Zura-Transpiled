@import "../std/type.zu";

const TokenKind := enum {
  Plus,
  Dash,
  Star,
  Slash,
  LParen,
  RParen,
  Int,
  Float,
  Identifier,
  String,
  Comma,
  Semicolon,
  Equals,
  LBrace,
  RBrace,
  LBracket,
  RBracket,
  Less,
  Greater,
  Ampersand,
  Percent,
  Bang,
  Question,
  Colon,
  Dot,
  EOF
};

const Token := struct {
  value: str,
  kind: int!,
  line: int!,
  col: int!,
};

const is_eof := fn (source: *char, index: int!) bool {
  if (source[index] == @cast<char>(0)) return true;
  return false;
};

const peek := fn (source: *char, index: int!) char {
  return source[index];
};

const advance := fn (index: *int!, col: *int!) void {
  index&++;
  col&++;
};

const make_token := fn (value: str, kind: int!, line: int!, col: int!) Token {
  have token: Token = {
    value: value,
    kind: kind,
    line: line,
    col: col,
  };
  return token;
};
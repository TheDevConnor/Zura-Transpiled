@import "std/asciiToString.zu";
@import "std/readfile.zu";
@import "helper.zu";

const main := fn () int! {
  have argv: *[]str = @getArgv();
  have argc: int! = @getArgc();

  if (argc < 2) {
    @outputln(1, "No arguments provided. Please provide a string to reverse.");
    return ERRORS.NoArgumentsProvided; # 2
  }

  have filePath: *char = nil;
  loop (i = 0; i < argc) :  (i++) {
    if (@strcmp(argv&[i], "--help"))    return printHelp();
    if (@strcmp(argv&[i], "--version")) return printVersion();
    if (@strcmp(argv&[i], "--license")) return printLicense();
    if (@strcmp(argv&[i], "--lsp"))     return printLsp();
    if (@strcmp(argv&[i], "build")) {
      # expect the very next argument to be a path, if there IS a next argument
      if (i == argc - 1) {
        @outputln(1, "ERROR: No filepath to build.");
        return ERRORS.NoPathProvided; # 3
      }

      filePath = @cast<*char>(argv&[i++]);
      i++;
    }
  }

  if (filePath == nil) return ERRORS.NoActionProvided; # 4

  have fileContents: *char = readFile(filePath);

  if (fileContents == nil) {
    @outputln(1, "ERROR: Could not open file: ", filePath);
    return ERRORS.FileOpenFailed; # 5
  }
  # LEXER TIME
  loop (i = 0; i < 2048) : (i++) {
    @output(1, AsciiToString(fileContents[i]));
  }

  @free(fileContents, 2048);
  return 0;
};
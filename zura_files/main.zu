@import "std/readfile.zu";

@import "lexer/lexer.zu";
@import "helper.zu";

const main := fn () int! {
  have argv: *[]str = @getArgv();
  have argc: int! = @getArgc();
  have size: int! = 6048; # Size of the buffer to read from file
  
  if (argc < 2) {
    @outputln(1, "No arguments provided, Here are the available options:");
    printHelp();
    return ERRORS.NoArgumentsProvided; # 2
  }

  have filePath: *char = nil;
  have quietMode: bool = false;
  have debugMode: bool = false;
  loop (i = 0; i < argc) :  (i++) {
    if (@streq(argv&[i], "--help"))    return printHelp();
    if (@streq(argv&[i], "--version")) return printVersion();
    if (@streq(argv&[i], "--license")) return printLicense();
    if (@streq(argv&[i], "--lsp"))     return printLsp();
    if (@streq(argv&[i], "--quiet"))   quietMode = true;
    if (@streq(argv&[i], "--debug"))   debugMode = true;
    if (@streq(argv&[i], "build")) {
      # expect the very next argument to be a path, if there IS a next argument
      if (i == argc - 1) {
        @outputln(1, "ERROR: No filepath to build.");
        return ERRORS.NoPathProvided; # 3
      }

      filePath = @cast<*char>(argv&[i++]);
      i++;
    }
  }

  if (filePath == nil) {
    @outputln(1, "ERROR: Empty or malformed input; run with --help for available options");
    return ERRORS.NoActionProvided; # 4
  }

  have fileContents: *char = readFile(filePath, size);
  if (fileContents == nil) {
    @outputln(1, "ERROR: Could not open file: ", filePath);
    return ERRORS.FileOpenFailed; # 5
  }

  have realSize: int! = size;
  # Count backwards until we reach a NON-null byte
  # Also, because iterators are typically UNsigned, this condition is always TRUE lol
  loop (i = size - 1; i >= 0) : (i--) {
    if (fileContents[i] == @cast<char>(0)) {
      realSize--;
    } else {
      break; # Stop when we reach a non-null byte
    }
  } 
  # add a null terminator to the end of the file contents
  fileContents[realSize - 1] = @cast<char>(0);
  
  scan(fileContents, realSize); # TODO: Fix null terminators filling console, very annoying
  
  @free(fileContents, size); # My computer is gonna explode nooo!!
  # @free(lx.current, size);
  # @free(lx.start, size);
  return 0;
};
